############################
## STEP 1 - INIT packages ##
############################
### Decide what package is required from the OPTIONAL package below.
### Add package to the package.json



###############################
## STEP 2 - Default packages ##
###############################
### git init
### npm install
####### whats included #######
### Base package was generated by express project generator (https://expressjs.com/en/starter/generator.html)
### ## npx express-generator --view=hbs --git
### Default: contains
  ## error handling, debug help, 
  ## router
  ## .env config
  ## handlebars + body-parser FOR templating and form post handling
  ## .env secure config loading
  ## nodemon for auto restart
#######################



##################################
## STEP 3 - [Optional] packages ##
##################################
### To ENABLE the Optional functions, [Uncomment code] + [remove __ from the start of related files]
### remember to REMOVE the unwanted code & files
############
## Login Base (session / bcryptjs / connect-flash msg / passport [auth] / passport-local [strategy] )
#### npm i express-session bcryptjs connect-flash passport passport-local
####
## Login API with JWT (json web token / passport-jwt [strategy])
#### npm i jsonwebtoken passport-jwt
####
## Login Facebook (passport-facebook [strategy])
#### npm i passport-facebook
####
## Login Google (passport-google-oauth [strategy])
#### npm i passport-google-oauth
############
## IMGUR image hosting
#### npm install imgur
#### Add below
        const imgur = require('imgur');

        imgur.setClientId(process.env.IMGUR_CLIENT_ID);
        imgur.setAPIUrl('https://api.imgur.com/3/');

        if (file) {
          imgur.uploadFile(file.path)
          .then((img) => {
            Restaurant.create({
              image        : file ? img.data.link : null,
            }).then((restaurant) => {
              callback({ status: 'success', message: 'restaurant was successfully created' });
            });
          })
          .catch((err) => {
            console.error('imgur upload failed', err.message);
          });
        }
############
## File Upload (allows multipart/form-data) (below saves to local hosting)
#### npm install multer
#### ADD BELOW
      // 2 folders
      /temp
      /upload
      // app.js
      app.use('/upload', express.static(__dirname + '/upload'))
      // router
      const multer = require('multer')
      const upload = multer({ dest: 'temp/' })
      app.post('/admin/restaurants', authenticatedAdmin, upload.single('image'), adminController.postRestaurant);
      // controller
      const fs = require('fs')
      const { file } = req // equal to const file = req.file
      if (file) {
        fs.readFile(file.path, (err, data) => {
          if (err) console.log('Error: ', err)
          fs.writeFile(`upload/${file.originalname}`, data, () => {
            return Restaurant.create({
              image: file ? `/upload/${file.originalname}` : null
            }).then((restaurant) => {
              req.flash('success_messages', 'restaurant was successfully created')
              return res.redirect('/admin/restaurants')
            })
          })
        })
      }
############
## 
